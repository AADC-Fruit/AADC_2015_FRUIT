#include "vector2.h"
#include <math.h>
#include <sstream>

// -------------------------------------------------------------------------------------------------
Vector2::Vector2(int x, int y) {
// -------------------------------------------------------------------------------------------------
  x_ = x;
  y_ = y;
}

// -------------------------------------------------------------------------------------------------
Vector2::Vector2(Vector2 const & other) {
// -------------------------------------------------------------------------------------------------
  x_ = other.get_x();
  y_ = other.get_y();
}

// -------------------------------------------------------------------------------------------------
Vector2::Vector2() {
// -------------------------------------------------------------------------------------------------
  x_ = ERROR_VALUE;
  y_ = ERROR_VALUE;
}

// -------------------------------------------------------------------------------------------------
bool Vector2::operator==(Vector2 const & other) const {
// -------------------------------------------------------------------------------------------------
  return (x_ == other.get_x() && y_ == other.get_y());
}

// -------------------------------------------------------------------------------------------------
int Vector2::get_x() const {
// -------------------------------------------------------------------------------------------------
  return x_;
}

// -------------------------------------------------------------------------------------------------
int Vector2::get_y() const {
// -------------------------------------------------------------------------------------------------
  return y_;
}

// -------------------------------------------------------------------------------------------------
Vector2 Vector2::computeVector(Vector2 const &other) const {
// -------------------------------------------------------------------------------------------------
  Vector2 result(other.get_x() - x_, y_ - other.get_y());
  return result;
}

// -------------------------------------------------------------------------------------------------
double Vector2::computeAngle(Vector2 const &other) const {
// -------------------------------------------------------------------------------------------------
  if (absoluteValue() <= 0 || other.absoluteValue() <= 0) return 0;
  
  double input = computeScalar(other) / (absoluteValue() * other.absoluteValue());
  if (input > 1) input = 1;
  if (input < -1) input = -1;
  double radian = acos(input);
  return radian * 180.0/M_PI;
}

// -------------------------------------------------------------------------------------------------
int Vector2::computeScalar(Vector2 const &other) const {
// -------------------------------------------------------------------------------------------------
  return (get_x() * other.get_x()) + (get_y() * other.get_y());
}

// -------------------------------------------------------------------------------------------------
double Vector2::absoluteValue() const {
// -------------------------------------------------------------------------------------------------
  return sqrt(pow(get_x(),2) + pow(get_y(),2)); 
}

// -------------------------------------------------------------------------------------------------
int Vector2::operator[](unsigned int index) const {
// -------------------------------------------------------------------------------------------------
  if (index == 0) return get_x();
  else if (index == 1) return get_y();
  return ERROR_VALUE;
}

// -------------------------------------------------------------------------------------------------
Vector2 Vector2::operator+(Vector2 const &other) const {
// -------------------------------------------------------------------------------------------------
  return Vector2(get_x() + other.get_x(), get_y() + other.get_y());
}

// -------------------------------------------------------------------------------------------------
Vector2 Vector2::operator*(double scalar) const {
// -------------------------------------------------------------------------------------------------
  return Vector2(round(get_x() * scalar), round(get_y() * scalar));
}

// -------------------------------------------------------------------------------------------------
bool Vector2::isLeftTurn(Vector2 const &other) const {
// -------------------------------------------------------------------------------------------------
  Vector2 result = *this + other;
  return result.get_x() < get_x();
}

// -------------------------------------------------------------------------------------------------
std::string Vector2::toString() const {
// -------------------------------------------------------------------------------------------------
  std::stringstream ss;
  ss << "(" << get_x() << "," << get_y() << ")";
  return ss.str();
}
